//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProductoPrueba> ProductoPrueba { get; set; }
        public virtual DbSet<UsuarioProducto> UsuarioProducto { get; set; }
        public virtual DbSet<UsuarioPrueba> UsuarioPrueba { get; set; }
    
        public virtual int spActualizarProductoPrueba(Nullable<int> idProducto, string nombre, Nullable<int> cantidad, string descripcion)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarProductoPrueba", idProductoParameter, nombreParameter, cantidadParameter, descripcionParameter);
        }
    
        public virtual int spActualizarUsuarioPrueba(string nombre, string direccion, Nullable<int> telefono, string usuarioP, string identificacion, string contrasena, Nullable<short> idTipoUsuario, ObjectParameter registrado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var usuarioPParameter = usuarioP != null ?
                new ObjectParameter("UsuarioP", usuarioP) :
                new ObjectParameter("UsuarioP", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var idTipoUsuarioParameter = idTipoUsuario.HasValue ?
                new ObjectParameter("idTipoUsuario", idTipoUsuario) :
                new ObjectParameter("idTipoUsuario", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarUsuarioPrueba", nombreParameter, direccionParameter, telefonoParameter, usuarioPParameter, identificacionParameter, contrasenaParameter, idTipoUsuarioParameter, registrado);
        }
    
        public virtual int spComprarProductoPrueba(Nullable<int> idProducto, Nullable<int> idUsuario)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spComprarProductoPrueba", idProductoParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<spConsultaCompraEfectiva_Result> spConsultaCompraEfectiva(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaCompraEfectiva_Result>("spConsultaCompraEfectiva", idUsuarioParameter);
        }
    
        public virtual ObjectResult<spConsultaCompraTotal_Result> spConsultaCompraTotal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaCompraTotal_Result>("spConsultaCompraTotal");
        }
    
        public virtual ObjectResult<spConsultaProducto_Result> spConsultaProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaProducto_Result>("spConsultaProducto");
        }
    
        public virtual ObjectResult<spConsultaProductoId_Result> spConsultaProductoId(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaProductoId_Result>("spConsultaProductoId", idProductoParameter);
        }
    
        public virtual ObjectResult<spConsultaUsuario_Result> spConsultaUsuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaUsuario_Result>("spConsultaUsuario");
        }
    
        public virtual ObjectResult<spConsultaUsuarioId_Result> spConsultaUsuarioId(string identificacion)
        {
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConsultaUsuarioId_Result>("spConsultaUsuarioId", identificacionParameter);
        }
    
        public virtual int spEliminarProductoPrueba(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarProductoPrueba", idProductoParameter);
        }
    
        public virtual int spEliminarUsuarioPrueba(Nullable<int> identificacion)
        {
            var identificacionParameter = identificacion.HasValue ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarUsuarioPrueba", identificacionParameter);
        }
    
        public virtual int spRegistrarProductoPrueba(string nombre, Nullable<int> cantidad, string descripcion, ObjectParameter registrado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegistrarProductoPrueba", nombreParameter, cantidadParameter, descripcionParameter, registrado);
        }
    
        public virtual int spRegistrarUsuarioPrueba(string nombre, string direccion, Nullable<int> telefono, string usuarioP, string identificacion, string contrasena, Nullable<short> idTipoUsuario, ObjectParameter registrado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var usuarioPParameter = usuarioP != null ?
                new ObjectParameter("UsuarioP", usuarioP) :
                new ObjectParameter("UsuarioP", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("Identificacion", identificacion) :
                new ObjectParameter("Identificacion", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var idTipoUsuarioParameter = idTipoUsuario.HasValue ?
                new ObjectParameter("idTipoUsuario", idTipoUsuario) :
                new ObjectParameter("idTipoUsuario", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegistrarUsuarioPrueba", nombreParameter, direccionParameter, telefonoParameter, usuarioPParameter, identificacionParameter, contrasenaParameter, idTipoUsuarioParameter, registrado);
        }
    
        public virtual ObjectResult<spValidarUsuarioPrueba_Result> spValidarUsuarioPrueba(string usuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidarUsuarioPrueba_Result>("spValidarUsuarioPrueba", usuarioParameter);
        }
    }
}
